@page "/students/create"
@using StudentView.Models
@inject ISnackbar SnackBar
@inject HttpClient Client
@inject NavigationManager NavManager

<h3>CreateStudent</h3>
<br />
<br />
<div class="d-flex justify-content-center flex-column">
    <MudPaper Class="pa-8 w-50">
        <MudForm @ref="@_form"
                 Model="_model"
                 @bind-IsValid="@success"
                 @bind-Errors="@errors">

            <MudTextField @bind-Value="_model.FirstName" 
                          T="string" 
                          Label="FirstName"
                          Variant="Variant.Text"
                          Immediate="true"
                          Required="true" 
                          RequiredError="Firstname is missing!" />

            <MudTextField @bind-Value="_model.LastName" 
                          T="string" 
                          Label="LastName" 
                          Variant="Variant.Text" 
                          Immediate="true"
                          Required="true"
                          RequiredError="Surname is missing!" />

            <MudDatePicker @bind-Value="_model.Birthday" 
                           Variant="Variant.Text" 
                           Date="DateTime.Today" 
                           IsDateDisabledFunc="time => time > DateTime.Today"/>

            <MudNumericField @bind-Value="_model.Classroom" 
                             Label="Classroom" 
                             Min="0" Max="10"
                             HelperText="Classroom should be between 0 and 10"
                             Error="_model.Classroom > 10 || _model.Classroom < 0"
                             ErrorText="Classroom only from 0 to 10!"/>

        </MudForm>
    </MudPaper>
    <br/>
    <MudPaper Class="pa-8 w-50">
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mx-2" Href="/students">Close</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="!success" OnClick="async() => await AddStudent">Create</MudButton>
    </MudPaper>
</div>

@code {
    Student _model = new();
    bool success;
    string[] errors = [];

    MudForm _form = new();

    async Task AddStudent()
    {
        if (!_form.IsValid)
        {
            SnackBar.Add("Form is invalid", Severity.Warning);
            return;
        }

        try
        {
            var response = await Client.PostAsJsonAsync("create", _model);

            if (response.IsSuccessStatusCode)
                NavManager.NavigateTo("/students");

            SnackBar.Add("Could not save student :" + response.RequestMessage, Severity.Error);
        }
        catch (Exception e)
        {
            SnackBar.Add("Server is maybe down!" + e.Message, Severity.Error);
        }
    }
}
