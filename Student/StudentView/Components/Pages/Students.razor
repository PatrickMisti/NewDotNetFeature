@page "/students"
@using Microsoft.AspNetCore.Mvc
@using MudBlazor.Extensions
@using StudentView.Models
@inject HttpClient Client
@inject ISnackbar SnackBar

<h3>Students</h3>

@if (hasError)
{
    <p>Loading failed!!!</p>
}
else 
{
    <div>
        <MudDataGrid Items="students" Filterable="false" SortMode="SortMode.None" Groupable="false">
            <Columns>
                <PropertyColumn Property="s => s.Id" Title="Identity"></PropertyColumn>
                <PropertyColumn Property="s => s.FirstName" Title="Firstname"></PropertyColumn>
                <PropertyColumn Property="s => s.LastName" Title="Lastname"></PropertyColumn>
                <PropertyColumn Property="s => s.Birthday" Title="Birthday"></PropertyColumn>
                <PropertyColumn Property="s => s.Classroom" Title="Classroom"></PropertyColumn>
                <TemplateColumn CellClass="d-flex justify-end" >
                    <CellTemplate>
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                       Variant="Variant.Outlined" 
                                       Color="Color.Secondary" 
                                       Class="mr-2"
                                       OnClick="@(async () => await DeleteStudent(context.Item.Id))"/>

                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                       Variant="Variant.Outlined" 
                                       Color="Color.Primary" 
                                       Href="@("/students/"+@context.Item.Id)" />
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>
    </div>
    <div class="d-flex justify-content-end">
        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Href="/students/create" />
    </div>
}


@code {
    List<Student> students = [];
    bool hasError = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            students = await Client.GetFromJsonAsync<List<Student>>("all") ?? [];
        }
        catch
        {
            hasError = true;
            SnackBar.Add("Could not load Data maybe Server is down!!", Severity.Error);
        }
    }

    async Task DeleteStudent(int? id)
    {
        if (id == null)
            return;

        try
        {
            var response = await Client.DeleteAsync($"delete/{id}");

            if (!response.IsSuccessStatusCode)
            {
                SnackBar.Add("Could not delete student!" + response.StatusCode, Severity.Error);
                return;
            }
            var s = students.FirstOrDefault(p => p.Id == id);
            students.Remove(s);
        }
        catch (Exception e)
        {
            SnackBar.Add("Server is maybe down!" + e.Message, Severity.Error);
            Console.WriteLine(e.Message);
        }
    }
}
