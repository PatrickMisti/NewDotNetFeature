@page "/students/{id:int}"
@using System.Text.Json
@using StudentView.Models
@inject NavigationManager NavManager
@inject ISnackbar SnackBar
@inject HttpClient Client


<h3>EditStudent</h3>
<p>@Id</p>
<br />
<br />

<div class="p-5">
    <MudCard>
        <MudForm Model="_student" @ref="@_form">
            <MudCardContent>
                <MudTextField @bind-Value="_student!.FirstName" Label="FirstName"></MudTextField>
                <MudTextField @bind-Value="_student!.LastName" Label="Surename"></MudTextField>
                <MudTextField @bind-Value="_student!.Classroom" Label="Classroom"></MudTextField>

                <MudDatePicker
                    @bind-Date="_student!.Birthday"
                    Mask="@(new DateMask("dd.MM.yyyy"))" Label="Birthday" />
                @* Without Route @rendermode interactive server not work*@

            </MudCardContent>
        </MudForm>
    </MudCard>
</div>
<div class="d-flex m-5 justify-content-end">
    <MudButton Variant="Variant.Filled" Href="/students">Close</MudButton>
    <MudButton Variant="Variant.Filled" OnClick="@(async () => await Update())">Save</MudButton>
</div>



@code {

    [Parameter] public int Id { get; set; }

    MudForm _form = new ();

    Student? _student = new();

    protected override async Task OnParametersSetAsync()
    {
        try
        {
            var result = await (await Client.PutAsJsonAsync<Student>($"byId/{Id}", null)).Content.ReadAsStringAsync();
            _student = JsonSerializer.Deserialize<Student>(result, new JsonSerializerOptions { PropertyNameCaseInsensitive = true });

            if (_student is null)
                NavManager.NavigateTo("/students");
        }
        catch (Exception e)
        {
            SnackBar.Add("Could not find student!", Severity.Warning);
        }
    }

    async Task Update()
    {
        if (!_form.IsValid)
        {
            SnackBar.Add("Form is invalid", Severity.Warning);
            return;
        }

        try
        {
            var response = await Client.PutAsJsonAsync("update", _student);

            if (response.IsSuccessStatusCode)
            {
                NavManager.NavigateTo("/students");
                return;
            }
                

            SnackBar.Add("Could not update student: " + response.RequestMessage, Severity.Error);
        }
        catch (Exception e)
        {
            SnackBar.Add("Server is maybe down!" + e.Message, Severity.Error);
        }
    }
}
